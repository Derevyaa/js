/**
 * Конструктори в JavaScript використовуються для створення інстанцій об'єктів зі специфічними властивостями і методами. Вони є особливим типом функцій, 
 * які призначені для ініціалізації нових об'єктів. Ось основні аспекти роботи з конструкторами:

Створення конструктора
Конструктор визначається як звичайна функція, але зазвичай викликається з оператором new, який створює новий об'єкт, 
зв'язує this з новим об'єктом і автоматично повертає цей об'єкт. Ось приклад простого конструктора:
 */



let myCar = new Car("Toyota", "Corolla", 2020);
console.log(myCar.model); // Виведе "Corolla"


/**
 * Використання prototype
Кожен конструктор має властивість prototype, яка є об'єктом і використовується для спільного визначення методів і властивостей, 
які будуть спільними для всіх інстанцій створених цим конструктором:
 */

function Car1(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
}

Car1.prototype.drive = function () {
    console.log("This " + this.model + " is driving!");
};

let myCar1 = new Car1("Nissan", "Corolla", 2020);
myCar1.drive(); // Виведе "This Nissan is driving!"


/**
 * Конструктори ES6 класів
З ES6, JavaScript надає синтаксис класів, який робить визначення конструкторів більш зручним і читабельним.
Класи в JavaScript фактично є "синтаксичним цукром" над існуючим прототипним наслідуванням:
 */

class Vehicle {
    constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    drive() {
        console.log("This " + this.model + " is driving!");
    }
}

let myVehicle = new Vehicle("Honda", "Civic", 2019);
myVehicle.drive(); // Виведе "This Civic is driving!"

/**
 * Переваги і недоліки
Переваги:

Структурований і організований код, що полегшує читання і підтримку.
Перевикористання коду: спільні властивості та методи визначаються один раз в prototype, а не в кожному екземплярі.

Недоліки:

Якщо вам потрібні лише декілька екземплярів, або вони дуже різноманітні, використання конструктора може бути надмірним.
Можливі проблеми з продуктивністю при неправильному використанні прототипного наслідування.

Надмірність при створенні декількох або дуже різноманітних екземплярів
Проблема:
Коли потрібно створити лише декілька екземплярів або кожен екземпляр має відмінні характеристики, 
використання конструкторів може бути неоптимальним. Такий підхід змушує розробника визначати всі можливі властивості 
і методи у конструкторі чи його прототипі, що може призвести до зайвої складності та коду, який важко підтримувати.

Рішення:
Для випадків, коли екземпляри досить різноманітні або їх небагато, можна використовувати простіші конструкції, наприклад, 
об'єктні літерали, які не вимагають визначення формального конструктора:
*/

let car = {
    make: "Toyota",
    model: "Corolla",
    year: 2020,
    drive: function () {
        console.log("This car is driving!");
    }
};

car.drive();

function Car(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.drive = function () {
        console.log("This " + this.model + " is driving!");
    };
}

// Створення нового екземпляру автомобіля
let myCar2 = new Car("Toyota", "Corolla", 2020);
myCar2.drive(); // Виведе: "This Corolla is driving!"


