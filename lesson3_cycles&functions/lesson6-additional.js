/**
 * Метод str.endsWith(searchString, length) в JavaScript використовується для перевірки, чи закінчується рядок str певним підрядком searchString. 
 * Ось як він працює:
 * Підрядок (searchString): Це рядок, на який має закінчуватися основний рядок str. Якщо цей підрядок є в кінці str, метод повертає true.
 * Довжина (length): Це необов'язковий параметр, який вказує, скільки символів з кінця основного рядка str слід враховувати при перевірці. 
 * Якщо цей параметр відсутній або більший за довжину рядка str, то використовується повна довжина str.
 */
const str = "Hello, world!";
console.log(str.endsWith("world!")); // Повертає true, бо 'str' закінчується на "world!"
console.log(str.endsWith("world", 11)); // Повертає false, бо перевіряється тільки "Hello, worl"

var fakeData = "JavaScript is fun";
var find = "Fun";
// Перетворюємо обидва рядки на верхній регістр і перевіряємо, чи починається 'str' на 'find'
var startsWithJS = fakeData.toUpperCase().endsWith(find.toUpperCase());
console.log(startsWithJS);
/**
 * У першому виклику, рядок str повністю перевіряється на наявність "world!" на кінці,
 * і оскільки він там є, результатом є true. У другому виклику, використовується параметр length, 
 * який обмежує перевірку лише першими 11 символами рядка str. Тому він перевіряє частину рядка "Hello, worl", 
 * і оскільки вона не закінчується на "world", результатом є false.
 */

/**
 * Метод str.indexOf(searchString, position) у JavaScript використовується для того, щоб знайти першу появу підрядка searchString у рядку str. Ось як цей метод працює:

Підрядок (searchString): Це текст, який ви хочете знайти всередині основного рядка str.
Початкова позиція (position): Це необов'язковий аргумент, який вказує індекс у рядку str, з якого почнеться пошук. Якщо цей параметр не вказано, пошук починається 
з самого початку рядка.
Робота методу:
Знаходження підрядка: indexOf починає перевіряти str, починаючи від індексу position, якщо він вказаний, або з початку рядка. Він шукає перше входження searchString в str.
Повернення індексу: Якщо searchString знайдено, indexOf повертає індекс першої літери знайденого підрядка у str. Якщо searchString не знайдено, метод повертає -1.
 */

const str1 = "Hello, world!";

// Пошук підрядка "world" в рядку "Hello, world!". Перша поява знаходиться на індексі 7
console.log(str1.indexOf("world")); // Виведе 7

// Пошук підрядка "World" в рядку "Hello, world!". JavaScript чутливий до регістру, тому "World" не знайдено
console.log(str1.indexOf("World")); // Виведе -1, оскільки точної відповідності не знайдено

// Пошук підрядка "o" в рядку "Hello, world!", починаючи з індексу 5. Перша поява "o" після індексу 5 знаходиться на індексі 8
console.log(str1.indexOf("o", 5)); // Виведе 8

// Пошук підрядка "o" в рядку "Hello, world!", починаючи з індексу 9. "o" знаходиться на індексі 4 та 8, але не після 9, тому не знайдено
console.log(str1.indexOf("o", 9)); // Виведе -1


/**
 * Метод substring() у JavaScript використовується для отримання підрядка з основного рядка. Він приймає два аргументи: початковий індекс і кінцевий індекс, 
 * і повертає частину рядка, яка лежить між цими індексами, включаючи символ на початковому індексі, але виключаючи символ на кінцевому індексі. 
 * Ось як працює метод substring():

Початковий індекс (startIndex): Вказує на індекс першого символу у рядку, який має бути включений до підрядка. 
Якщо startIndex є більшим за довжину рядка, JavaScript обробляє його як довжину рядка. Якщо він від'ємний, JavaScript обробляє його як 0.
Кінцевий індекс (endIndex): Вказує на індекс символу в рядку, до якого (не включаючи) має бути взято підрядок. 
Якщо endIndex не вказано, substring() вибере усі символи до кінця рядка. Якщо endIndex більший за довжину рядка, 
JavaScript обробляє його як довжину рядка. Якщо endIndex менший за startIndex, метод автоматично міняє місцями ці індекси.
 */

const text = "Hello, world!";

console.log(text.substring(7, 12)); // Повертає "world"
console.log(text.substring(7)); // Повертає "world!"
console.log(text.substring(12, 7)); // Повертає "world", автоматично міняє місцями індекси
console.log(text.substring(-5, 5)); // Повертає "Hello", від'ємний індекс обробляється як 0

/**
 * Метод slice() у JavaScript використовується для вирізання частини рядка або масиву. Він працює схоже до substring() для рядків, 
 * але має додаткові особливості та використовується також для масивів. Ось основні риси його роботи з рядками:

Початковий індекс (start): Вказує на індекс першого символу у рядку, який має бути включений у результат. 
Якщо start вказує на позицію за межами рядка, ви отримаєте пустий рядок. 
Якщо start є від'ємним, це вказує на позицію, починаючи від кінця рядка.
Кінцевий індекс (end): Це кінцева точка вирізання, яка не включається до результату. 
Якщо end не вказано, slice() вирізає все від start до кінця рядка. 
Якщо end від'ємний, він вказує на позицію кінця вирізання, починаючи з кінця рядка.
Особливості методу slice():
Гнучкість індексів: slice() може приймати від'ємні індекси, які відраховуються з кінця рядка. Наприклад, -1 як end вказує на останній символ.
Безпечність: Навіть якщо індекси за межами рядка, slice() просто повертає пустий рядок, не викликаючи помилок.
 */

const text1 = "Hello, world!";

console.log(text1.slice(7, 12)); // "world"
console.log(text1.slice(7)); // "world!"
console.log(text1.slice(-6, -1)); // "world"
console.log(text1.slice(-1)); // "!"
console.log(text1.slice(50)); // "" (пустий рядок, бо 50 за межами довжини рядка)

/**
 * Метод .trim() у JavaScript використовується для видалення пробілів з початку і кінця рядка. 
 * Цей метод повертає новий рядок без пробільних символів (таких як звичайні пробіли, табуляція, нові рядки) на його початку та кінці. 
 * Він не змінює оригінальний рядок.

Ось як працює .trim():
Видалення пробілів на початку: .trim() перевіряє кожен символ з початку рядка, поки не зустріне перший символ, який не є пробільним. 
Всі символи до цього символу (включно з пробілами, табуляцією та символами нового рядка) видаляються.
Видалення пробілів у кінці: Аналогічно, метод перевіряє кожен символ з кінця рядка до першого символу, який не є пробільним. 
Всі символи після цього символу видаляються
 */

const original = "   Hello, world!   ";
const trimmed = original.trim();

console.log(original); // "   Hello, world!   "
console.log(trimmed); // "Hello, world!"

/**
 * 
Метод .trim() у JavaScript видаляє пробільні символи тільки з початку і кінця рядка, 
але він не впливає на пробіли або інші пробільні символи, які знаходяться всередині самого рядка.

Якщо вам потрібно обробити або видалити пробіли, які знаходяться в середині рядка, 
вам доведеться використовувати інші методи або комбінації методів. Наприклад, ви можете використати replace() 
з регулярним виразом для заміни або видалення пробілів в середині рядка.

Ось декілька прикладів:
Заміна кількох пробілів на один:
Якщо ви хочете замінити послідовності кількох пробілів одним пробілом всередині рядка, можна використати метод replace() з регулярним виразом:
 */
const text2 = "Hello,    world! How    are   you?";
const singleSpaced = text2.replace(/\s+/g, ' '); // Тут \s+ в регулярному виразі відповідає за знаходження одного або більше пробільних символів, і g означає глобальний пошук по всьому рядку.

console.log(singleSpaced); // "Hello, world! How are you?"

/**
 * Видалення всіх пробілів в рядку:
Якщо ви хочете видалити всі пробіли з рядка, включаючи ті, що всередині, можна використати схожий підхід:
 */

const text3 = "Hello, world! How are you?";
const noSpaces = text3.replace(/\s/g, '');

console.log(noSpaces); // "Hello,world!Howareyou?"





let greeting = String.fromCharCode(1055, 1088, 1080, 1074, 1110, 1090, 32, 1028, 1074, 1072, 1085, 1075, 1077, 1083, 1110, 1086, 1085);
console.log(greeting); // Виведе: "Привіт Євангеліон"

let greeting1 = "Привіт Євангеліон".charCodeAt(8);
console.log(greeting1);

console.log("Є".charCodeAt(0));
console.log(String.fromCharCode("Є".charCodeAt()));



